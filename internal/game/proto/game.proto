syntax = "proto3";

package cards.proto;

option go_package = "/proto";

service CardGameService {
    rpc Ping(PingRequest) returns (PingResponse);
    rpc Register(RegisterRequest) returns (RegisterResponse);
    rpc JoinGame(JoinGameRequest) returns (JoinGameResponse);
    rpc GetGameState(GameStateRequest) returns (GameStateResponse);
    rpc PlayerAction(PlayerActionRequest) returns (Status);
    rpc ListenForGameActivity(GameActivityRequest) returns (stream GameActivityResponse);
}

message RegisterRequest {
    string name = 1;
}

message RegisterResponse {
    // Use this id for all other requests for this session.
    string session_id = 1;
}

message JoinGameRequest {
    string session_id = 1;
}

message JoinGameResponse {
}

message GameStateRequest {
    string session_id = 1;
}

message GameStateResponse {
    enum GameState {
        Unknown = 0;
        Preparing = 1;
        Playing = 2;
        Completed = 3;
        Aborted = 4;
    }
    message YourPlayerState {
        string name = 1;
        repeated string cards = 2;
        int32 num_tricks_taken = 3;
        int32 trick_score = 4;
        bool is_next_player = 5;
    }
    message OtherPlayerState {
        string name = 1;
        int32 num_cards_remaining = 2;
        int32 num_tricks_taken = 3;
        bool is_next_player = 4;
    }
    GameState state = 1;
    YourPlayerState player = 2;
    repeated OtherPlayerState other_players = 3;
    repeated string current_trick_cards = 4;
}

message PlayerActionRequest {
    string session_id = 1;
    oneof type {
        PlayCardAction play_card = 2;
    }
}

message PlayCardAction {
    string card = 2;
}

message Status {
    int32 code = 1; // 0 == ok
    string error = 2; // if code != 0
}

message GameActivityRequest {
    string session_id = 1;
}

message GameActivityResponse {
    oneof type {
        PlayerJoined player_joined = 1;
        GameReadyToStart game_ready_to_start = 2;
        GameStarted game_started = 3;
        YourTurn your_turn = 4;
        string msg = 5;
    }
}

message PlayerJoined {
    string name = 1;
}
message GameReadyToStart {
}
message GameStarted {
}
message YourTurn {
}

message PingRequest {
    string message = 1;
}

message PingResponse {
    string message = 1;
}

// Action reported
//  Player joined
//  Game ready to start
//  Game started
//  Your turn
//  Player played a card
//  New playerâ€™s turn
//  Trick was taken
//  Game is over
//      Scores
//  Chat received
// Action sent
//  Player ready to start
//  Play card
//  Quit/Leave
//  Send chat

