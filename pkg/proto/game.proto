syntax = "proto3";

package cards.proto;

option go_package = "/proto";

service CardGameService {
    rpc Ping(PingRequest) returns (PingResponse);
    rpc Register(RegisterRequest) returns (RegisterResponse);
    rpc ListGames(ListGamesRequest) returns (ListGamesResponse);
    rpc JoinGame(JoinGameRequest) returns (JoinGameResponse);
    rpc GameAction(GameActionRequest) returns (Status);
    rpc GetGameState(GameStateRequest) returns (GameState);
    rpc ListenForGameActivity(GameActivityRequest) returns (stream GameActivityResponse);
}

message RegisterRequest {
    string name = 1;
}

message RegisterResponse {
    // The is for the created session.
    // Use this id for all other requests for this session.
    string player_id = 1;
}

message ListGamesRequest {
    // Any of these phases. If no phase is listed, any phase is okay.
    repeated GameState.Phase phase = 1;
}

message ListGamesResponse {
    message GameSummary {
        string id = 1;
        GameState.Phase phase = 2;
        repeated string player_names = 3;
    }
    repeated GameSummary games = 1;
}

message JoinGameRequest {
    enum Mode {
        Unknown = 0;
        AsPlayer = 1;
        AsObserver = 2;
    }
    string player_id = 1;
    string game_id = 2;
    Mode mode = 3;
}

message JoinGameResponse {
    string game_id = 1;
}

message GameActionRequest {
    string player_id = 1;
// ??    string game_id = 2; 
    oneof type {
        ReadyToStartGameAction ready_to_start_game = 3;
        LeaveGameAction leave_game = 4;
        PlayCardAction play_card = 5;
    }
}

message ReadyToStartGameAction { }
message LeaveGameAction { }
message PlayCardAction {
    string card = 1;
}


message GameStateRequest {
    oneof type {
        string player_id = 1;
        string game_id = 2;
    }
}

message GameState{
    enum Phase {
        Unknown = 0;
        Preparing = 1;
        Playing = 2;
        Completed = 3;
        Aborted = 4;
    }
    message Player {
        string id = 1;
        string name = 2;
        Cards cards = 3;  // not populated for other players
        int32 num_cards = 4;
        repeated Cards tricks = 5;
        int32 num_tricks = 6;
        int32 trick_score = 7;  // sum of scores of all taken tricks
        bool is_next_player = 8;
        int32 hand_score = 9;  // after game is Completed, score for this hand (may be different than trick_score).
    }
    message Cards {
        repeated string cards = 1;
    }
    string id = 1;
    Phase phase = 2;
    repeated Player players = 3;
    Cards current_trick = 4;
    Cards legal_plays = 5;
}

message Status {
    int32 code = 1; // 0 == ok
    string error = 2; // if code != 0
}

message GameActivityRequest {
    string player_id = 1;
}

message GameActivityResponse {
    oneof type {
        PlayerJoined player_joined = 1;
        PlayerLeft player_left = 2;
        GameReadyToStart game_ready_to_start = 3;
        GameStarted game_started = 4;
        CardPlayed card_played = 5;
        TrickCompleted trick_completed = 6;
        // for player listener
        YourTurn your_turn = 7;
        GameFinished game_finished = 8;
        GameAborted game_aborted = 9;
        string broadcast_msg = 10;
    }
    message PlayerJoined {
        string name = 1;
        string game_id = 2;
    }
    message PlayerLeft {
        string name = 1;
        string game_id = 2;
    }
    message GameReadyToStart {
    }
    message GameStarted {
    }
    message CardPlayed {
    }
    message TrickCompleted {
        repeated string trick = 1;
        string trick_winner_id = 2;
        string trick_winner_name = 3;
    }
    message YourTurn {
    }
    message GameFinished {
    }
    message GameAborted {
    }
}

message PingRequest {
    string message = 1;
}

message PingResponse {
    string message = 1;
}

// Action reported
//  Player joined
//  Game ready to start
//  Game started
//  Your turn
//  Player played a card
//  Trick was taken
//  Game is over
//  Chat received
// Action sent
//  Player ready to start
//  Play card
//  Quit/Leave
//  Send chat

