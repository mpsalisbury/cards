syntax = "proto3";

package cards.proto;

option go_package = "/proto";

service CardGameService {
    rpc Ping(PingRequest) returns (PingResponse);
    rpc Register(RegisterRequest) returns (stream RegistryActivity);
    rpc CreateGame(CreateGameRequest) returns (CreateGameResponse);
    rpc ListGames(ListGamesRequest) returns (ListGamesResponse);
    rpc JoinGame(JoinGameRequest) returns (stream GameActivity);
    rpc ObserveGame(ObserveGameRequest) returns (stream GameActivity);
    rpc GameAction(GameActionRequest) returns (Status);
    rpc GetGameState(GameStateRequest) returns (GameState);
}

message RegisterRequest {
    string name = 1;
}

message RegisterResponse {
    // The is for the created session.
    // Use this id for all other requests for this session.
    string session_id = 1;
}

message CreateGameRequest { }
message CreateGameResponse {
    string game_id = 1;
}
message JoinGameRequest {
    string session_id = 1;
    string game_id = 2;
}
message ListGamesRequest {
    // Any of these phases. If no phase is listed, any phase is okay.
    repeated GameState.Phase phase = 1;
}

message ListGamesResponse {
    message GameSummary {
        string id = 1;
        GameState.Phase phase = 2;
        repeated string player_names = 3;
    }
    repeated GameSummary games = 1;
}

message ObserveGameRequest {
    string session_id = 1;
    string game_id = 2;
}

message GameActionRequest {
    string session_id = 1;
    string game_id = 2;
    oneof type {
        ReadyToStartGameAction ready_to_start_game = 3;
        LeaveGameAction leave_game = 4;
        PlayCardAction play_card = 5;
    }
}

message ReadyToStartGameAction { }
message LeaveGameAction { }
message PlayCardAction {
    string card = 1;
}

message GameStateRequest {
    // If session_id is present, returned game state will hide other players' cards.
    string session_id = 1;
    string game_id = 2;
}

message GameState{
    enum Phase {
        Unknown = 0;
        Preparing = 1;
        Playing = 2;
        Completed = 3;
        Aborted = 4;
    }
    message Player {
        string id = 1;
        string name = 2;
        Cards cards = 3;  // not populated for other players
        int32 num_cards = 4;
        repeated Cards tricks = 5;
        int32 num_tricks = 6;
        int32 trick_score = 7;  // sum of scores of all taken tricks
        bool is_next_player = 8;
        int32 hand_score = 9;  // after game is Completed, score for this hand (may be different than trick_score).
    }
    message Cards {
        repeated string cards = 1;
    }
    string id = 1;
    Phase phase = 2;
    repeated Player players = 3;
    Cards current_trick = 4;
    Cards legal_plays = 5;
}

message Status {
    int32 code = 1; // 0 == ok
    string error = 2; // if code != 0
}

message GameActivity {
    string game_id = 1;

    oneof type {
        PlayerJoined player_joined = 10;
        PlayerLeft player_left = 11;
        GameReadyToStart game_ready_to_start = 12;
        GameStarted game_started = 13;
        CardPlayed card_played = 14;
        TrickCompleted trick_completed = 15;
        YourTurn your_turn = 16; // for player listener
        GameFinished game_finished = 17;
        GameAborted game_aborted = 18;
        string broadcast_msg = 19;
    }
    message PlayerJoined {
        string name = 1;
    }
    message PlayerLeft {
        string name = 1;
    }
    message GameReadyToStart {
    }
    message GameStarted {
    }
    message CardPlayed {
    }
    message TrickCompleted {
        repeated string trick = 1;
        string trick_winner_id = 2;
        string trick_winner_name = 3;
    }
    message YourTurn {
    }
    message GameFinished {
    }
    message GameAborted {
    }
}

message PingRequest {
    string message = 1;
}

message PingResponse {
    string message = 1;
}

message RegistryActivity {
    oneof type {
        SessionCreated session_created = 1;
        GameCreated game_created = 2;
        GameDeleted game_deleted = 3;
        FullGamesList full_games_list = 4;
    }
    message SessionCreated {
        string session_id = 1;
    }
    message GameCreated {
        string game_id = 1;
    }
    message GameDeleted {
        string game_id = 1;
    }
    message FullGamesList {
        repeated string game_ids = 1;
    }
}